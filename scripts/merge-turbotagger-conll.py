# -*- coding: utf-8 -*-

"""
Script to merge a file with POS tags generated by the Turbo Tagger, with two
columns, and a file with UD training data, containing all the data columns.

It also takes care of comment lines and multiword tokens which are not treated
by the Turbo Tagger.
"""

import argparse


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('ud', help='File with UD data')
    parser.add_argument('tagger', help='File with Turbo Tagger annotation')
    parser.add_argument('output', help='Output file with merged annotation')
    parser.add_argument('column', help='Which tag column to use',
                        choices=['upos', 'xpos', 'both'])
    args = parser.parse_args()
    
    copy_upos = args.column in ('upos', 'both')
    copy_xpos = args.column in ('xpos', 'both')

    with open(args.ud, 'r') as f_ud, open(args.tagger, 'r') as f_tagger, \
            open(args.output, 'w') as f_out:
        for line_ud in f_ud:
            line_ud = line_ud.strip()
            if line_ud == '' or line_ud.startswith('#'):
                # comment or empty
                f_out.write(line_ud + '\n')
                continue

            fields_ud = line_ud.split('\t')
            if '-' in fields_ud[0]:
                # multiword token
                f_out.write(line_ud + '\n')
                continue

            # now treat the general case
            # we need to find matching lines in both input files
            line_tagger = next(f_tagger)
            line_tagger = line_tagger.strip()
            while line_tagger == '':
                line_tagger = next(f_tagger).strip()

            fields_tagger = line_tagger.split('\t')
            word_ud = fields_ud[1]
            word_tagger = fields_tagger[0]

            assert word_ud == word_tagger, \
                'Different words: %s and %s' % (word_ud, word_tagger)

            if copy_upos:
                fields_ud[3] = fields_tagger[1]
            if copy_xpos:
                fields_ud[4] = fields_tagger[1]
            
            line_out = '\t'.join(fields_ud) + '\n'
            f_out.write(line_out)
